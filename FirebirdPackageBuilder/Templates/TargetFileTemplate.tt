<#@ template language="C#" visibility="internal" #>
<#@ class name="TargetFileTemplate" #>
<#@ namespace name="Std.FirebirdEmbedded.Tools.Templates" #>
<#@ parameter name="Assets" type="Std.FirebirdEmbedded.Tools.FirebirdAsset[]" #>
<#@ parameter name="Release" type="Std.FirebirdEmbedded.Tools.FirebirdRelease" #>
<#@ parameter name="Tfm" type="System.String" #>
<#@ import namespace="Std.FirebirdEmbedded.Tools" #>
<?xml version="1.0" encoding="UTF-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

    <Target Name="CleanFirebirdBinaries" AfterTargets="Clean">
        <RemoveDir Directories="$(TargetDir)firebird"/>
    </Target>
<#
  foreach (var asset in Assets)
  {
      var ps = asset.PropertySuffix;
      var pkgp = MakePath(asset, $"{asset.Rid.PackageText}/{Release.Version}/", false);
      var rvp = MakePath(asset, pkgp);
#>

    <!-- ***** -->
    <!-- ***** <#= asset.Rid.Platform#> <#= asset.Rid.Architecture#> ***** -->
    <!-- ***** -->

    <Target Name="CopyFirebird<#=ps#>Files" AfterTargets="ResolveAssemblyReferences">
        <PropertyGroup>
            <FirebirdPlatform<#=ps#> Condition="'$(FirebirdPlatform<#=ps#>)' == ''">%(RuntimePack.RuntimeIdentifier)</FirebirdPlatform<#=ps#>>
            <FirebirdPlatform<#=ps#> Condition="'$(FirebirdPlatform<#=ps#>)' == ''">$(RuntimeIdentifier)</FirebirdPlatform<#=ps#>>
            <FirebirdPlatform<#=ps#> Condition="'$(FirebirdPlatform<#=ps#>)' == ''">$(RuntimeIdentifiers)</FirebirdPlatform<#=ps#>>
            <FirebirdPlatform<#=ps#> Condition="'$(FirebirdPlatform<#=ps#>)' == '' AND $([MSBuild]::IsOSPlatform('<#= asset.Rid.Platform #>')) AND '$([System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture)' == '<#= asset.Rid.Architecture.MsBuildName() #>'"><#= asset.Rid.PackageText#></FirebirdPlatform<#=ps#>>
            <_DoCopy<#=ps#> Condition="('$(FirebirdPlatform<#=ps#>)' == '' or '$(FirebirdPlatform<#=ps#>)' == '<#= asset.Rid.PackageText #>') and '$(FirebirdPlatform<#=ps#>)' != 'none'">True</_DoCopy<#=ps#>>
        </PropertyGroup>
        <ItemGroup Condition="'$(FirebirdPlatform<#=ps#>)' == '<#= asset.Rid.PackageText#>'">
            <_FirebirdPlatforms<#=ps#> Include="$(FirebirdPlatform<#=ps#>)" />
            <_FirebirdCopyItems<#=ps#> Include="$(MSBuildThisFileDirectory)..<#=Separator(asset)#>..<#=Separator(asset)#>.firebird<#=rvp#>**">
                <FirebirdFolder<#=ps#>><#=FormatPath(asset, "firebird/")#><#=pkgp#></FirebirdFolder<#=ps#>>
            </_FirebirdCopyItems<#=ps#>>
            <_FirebirdCopyItems<#=ps#> Include="$(MSBuildThisFileDirectory)..<#=Separator(asset)#>..<#=Separator(asset)#>LICENSES<#=Release.Version#>.zip">
                <FirebirdFolder<#=ps#>><#=FormatPath(asset, "firebird/")#></FirebirdFolder<#=ps#>>
            </_FirebirdCopyItems<#=ps#>>
        </ItemGroup>
        <ItemGroup>
            <Content Include="@(_FirebirdCopyItems<#=ps#>)" Condition="'$(_DoCopy<#=ps#>)' == 'True'">
                <NuGetPackageId><#=asset.PackageId#></NuGetPackageId>
                <Link>%(_FirebirdCopyItems<#=ps#>.FirebirdFolder<#=ps#>)%(RecursiveDir)%(FileName)%(Extension)</Link>
                <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
                <PublishState>Included</PublishState>
                <Visible>false</Visible>
                <Pack>false</Pack>
            </Content>
        </ItemGroup>
    </Target>
<#
  }
#>
</Project>
<#+
    string Separator(FirebirdAsset asset) => asset.Rid.Platform == Platform.Windows
        ? "\\"
        : "/";
  string FormatPath(FirebirdAsset asset, string path)
  {
    if (asset.Rid.Platform == Platform.Windows)
    {
      return path.Replace('/', '\\');
    }

    return path;
  }

  string MakePath(FirebirdAsset asset, string path, bool ensureLeading = true)
  {
    if (!path.StartsWith("/") && ensureLeading)
    {
      path = "/" + path;
    }

    return FormatPath(asset, path);
  }
#>
